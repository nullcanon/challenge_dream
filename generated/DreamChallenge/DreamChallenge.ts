// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddChallenge extends ethereum.Event {
  get params(): AddChallenge__Params {
    return new AddChallenge__Params(this);
  }
}

export class AddChallenge__Params {
  _event: AddChallenge;

  constructor(event: AddChallenge) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ctype(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get challengeId(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get placeId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get matchId(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get startAt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get endAt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get tokenIdLeft(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get tokenIdRight(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class EnterChallenge extends ethereum.Event {
  get params(): EnterChallenge__Params {
    return new EnterChallenge__Params(this);
  }
}

export class EnterChallenge__Params {
  _event: EnterChallenge;

  constructor(event: EnterChallenge) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get challengeId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get target(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tokenid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ModificationAdmin extends ethereum.Event {
  get params(): ModificationAdmin__Params {
    return new ModificationAdmin__Params(this);
  }
}

export class ModificationAdmin__Params {
  _event: ModificationAdmin;

  constructor(event: ModificationAdmin) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get newState(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ModifyChallenge extends ethereum.Event {
  get params(): ModifyChallenge__Params {
    return new ModifyChallenge__Params(this);
  }
}

export class ModifyChallenge__Params {
  _event: ModifyChallenge;

  constructor(event: ModifyChallenge) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ctype(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get challengeId(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get placeId(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get matchId(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get startAt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get endAt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get tokenIdLeft(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get tokenIdRight(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OpenChallenge extends ethereum.Event {
  get params(): OpenChallenge__Params {
    return new OpenChallenge__Params(this);
  }
}

export class OpenChallenge__Params {
  _event: OpenChallenge;

  constructor(event: OpenChallenge) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get challenageId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get leftScore(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get rightScore(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get target(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get openTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WithdrawReward extends ethereum.Event {
  get params(): WithdrawReward__Params {
    return new WithdrawReward__Params(this);
  }
}

export class WithdrawReward__Params {
  _event: WithdrawReward;

  constructor(event: WithdrawReward) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get challageId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DreamChallenge__getChallengeInfoResultValue0Struct extends ethereum.Tuple {
  get ctype(): i32 {
    return this[0].toI32();
  }

  get winnerTarget(): i32 {
    return this[1].toI32();
  }

  get id(): i32 {
    return this[2].toI32();
  }

  get placeId(): i32 {
    return this[3].toI32();
  }

  get matchId(): i32 {
    return this[4].toI32();
  }

  get leftScore(): i32 {
    return this[5].toI32();
  }

  get rightScore(): i32 {
    return this[6].toI32();
  }

  get startAt(): BigInt {
    return this[7].toBigInt();
  }

  get endAt(): BigInt {
    return this[8].toBigInt();
  }

  get openAt(): BigInt {
    return this[9].toBigInt();
  }

  get tokenIdLeft(): BigInt {
    return this[10].toBigInt();
  }

  get tokenIdRight(): BigInt {
    return this[11].toBigInt();
  }

  get leftTotalAmount(): BigInt {
    return this[12].toBigInt();
  }

  get rightTotalAmount(): BigInt {
    return this[13].toBigInt();
  }

  get leftMiddleTotalAmount(): BigInt {
    return this[14].toBigInt();
  }

  get rightMiddleTotalAmount(): BigInt {
    return this[15].toBigInt();
  }
}

export class DreamChallenge__getUserChallengeInfoResultValue0Struct extends ethereum.Tuple {
  get challengeId(): i32 {
    return this[0].toI32();
  }

  get amountsLeft(): BigInt {
    return this[1].toBigInt();
  }

  get amountsRight(): BigInt {
    return this[2].toBigInt();
  }

  get amountMiddleL(): BigInt {
    return this[3].toBigInt();
  }

  get amountMiddleR(): BigInt {
    return this[4].toBigInt();
  }

  get isTakeReward(): boolean {
    return this[5].toBoolean();
  }
}

export class DreamChallenge extends ethereum.SmartContract {
  static bind(address: Address): DreamChallenge {
    return new DreamChallenge("DreamChallenge", address);
  }

  challengeIdInex(): i32 {
    let result = super.call(
      "challengeIdInex",
      "challengeIdInex():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_challengeIdInex(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "challengeIdInex",
      "challengeIdInex():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getChallengeInfo(
    challengeId: i32
  ): DreamChallenge__getChallengeInfoResultValue0Struct {
    let result = super.call(
      "getChallengeInfo",
      "getChallengeInfo(uint16):((uint8,uint8,uint16,uint16,uint16,uint16,uint16,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(challengeId))]
    );

    return changetype<DreamChallenge__getChallengeInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getChallengeInfo(
    challengeId: i32
  ): ethereum.CallResult<DreamChallenge__getChallengeInfoResultValue0Struct> {
    let result = super.tryCall(
      "getChallengeInfo",
      "getChallengeInfo(uint16):((uint8,uint8,uint16,uint16,uint16,uint16,uint16,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(challengeId))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DreamChallenge__getChallengeInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getUserChallengeInfo(
    account: Address,
    challengeId: i32
  ): DreamChallenge__getUserChallengeInfoResultValue0Struct {
    let result = super.call(
      "getUserChallengeInfo",
      "getUserChallengeInfo(address,uint16):((uint16,uint256,uint256,uint256,uint256,bool))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(challengeId))
      ]
    );

    return changetype<DreamChallenge__getUserChallengeInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUserChallengeInfo(
    account: Address,
    challengeId: i32
  ): ethereum.CallResult<
    DreamChallenge__getUserChallengeInfoResultValue0Struct
  > {
    let result = super.tryCall(
      "getUserChallengeInfo",
      "getUserChallengeInfo(address,uint16):((uint16,uint256,uint256,uint256,uint256,bool))",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(challengeId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DreamChallenge__getUserChallengeInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getUserChallenges(account: Address): Array<BigInt> {
    let result = super.call(
      "getUserChallenges",
      "getUserChallenges(address):(uint256[])",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserChallenges(account: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserChallenges",
      "getUserChallenges(address):(uint256[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserRewards(account: Address, challengeId: i32): BigInt {
    let result = super.call(
      "getUserRewards",
      "getUserRewards(address,uint16):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(challengeId))
      ]
    );

    return result[0].toBigInt();
  }

  try_getUserRewards(
    account: Address,
    challengeId: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserRewards",
      "getUserRewards(address,uint16):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(challengeId))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAdmin(account: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftCost(): BigInt {
    let result = super.call("nftCost", "nftCost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nftCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nftCost", "nftCost():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rate(): BigInt {
    let result = super.call("rate", "rate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rate", "rate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  teamNft(): Address {
    let result = super.call("teamNft", "teamNft():(address)", []);

    return result[0].toAddress();
  }

  try_teamNft(): ethereum.CallResult<Address> {
    let result = super.tryCall("teamNft", "teamNft():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddChallengeCall extends ethereum.Call {
  get inputs(): AddChallengeCall__Inputs {
    return new AddChallengeCall__Inputs(this);
  }

  get outputs(): AddChallengeCall__Outputs {
    return new AddChallengeCall__Outputs(this);
  }
}

export class AddChallengeCall__Inputs {
  _call: AddChallengeCall;

  constructor(call: AddChallengeCall) {
    this._call = call;
  }

  get _ctype(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _placeId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _matchId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _startAt(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _endAt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _tokenIdLeft(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _tokenIdRight(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AddChallengeCall__Outputs {
  _call: AddChallengeCall;

  constructor(call: AddChallengeCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawTokenCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawTokenCall__Inputs {
    return new EmergencyWithdrawTokenCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawTokenCall__Outputs {
    return new EmergencyWithdrawTokenCall__Outputs(this);
  }
}

export class EmergencyWithdrawTokenCall__Inputs {
  _call: EmergencyWithdrawTokenCall;

  constructor(call: EmergencyWithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmergencyWithdrawTokenCall__Outputs {
  _call: EmergencyWithdrawTokenCall;

  constructor(call: EmergencyWithdrawTokenCall) {
    this._call = call;
  }
}

export class EnterChallengeCall extends ethereum.Call {
  get inputs(): EnterChallengeCall__Inputs {
    return new EnterChallengeCall__Inputs(this);
  }

  get outputs(): EnterChallengeCall__Outputs {
    return new EnterChallengeCall__Outputs(this);
  }
}

export class EnterChallengeCall__Inputs {
  _call: EnterChallengeCall;

  constructor(call: EnterChallengeCall) {
    this._call = call;
  }

  get _id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _target(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _tokenid(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class EnterChallengeCall__Outputs {
  _call: EnterChallengeCall;

  constructor(call: EnterChallengeCall) {
    this._call = call;
  }
}

export class ModificationAdminCall extends ethereum.Call {
  get inputs(): ModificationAdminCall__Inputs {
    return new ModificationAdminCall__Inputs(this);
  }

  get outputs(): ModificationAdminCall__Outputs {
    return new ModificationAdminCall__Outputs(this);
  }
}

export class ModificationAdminCall__Inputs {
  _call: ModificationAdminCall;

  constructor(call: ModificationAdminCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ModificationAdminCall__Outputs {
  _call: ModificationAdminCall;

  constructor(call: ModificationAdminCall) {
    this._call = call;
  }
}

export class ModifyChallengeCall extends ethereum.Call {
  get inputs(): ModifyChallengeCall__Inputs {
    return new ModifyChallengeCall__Inputs(this);
  }

  get outputs(): ModifyChallengeCall__Outputs {
    return new ModifyChallengeCall__Outputs(this);
  }
}

export class ModifyChallengeCall__Inputs {
  _call: ModifyChallengeCall;

  constructor(call: ModifyChallengeCall) {
    this._call = call;
  }

  get _cId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _ctype(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _placeId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _matchId(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _startAt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _endAt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _tokenIdLeft(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _tokenIdRight(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ModifyChallengeCall__Outputs {
  _call: ModifyChallengeCall;

  constructor(call: ModifyChallengeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OpenChallengeCall extends ethereum.Call {
  get inputs(): OpenChallengeCall__Inputs {
    return new OpenChallengeCall__Inputs(this);
  }

  get outputs(): OpenChallengeCall__Outputs {
    return new OpenChallengeCall__Outputs(this);
  }
}

export class OpenChallengeCall__Inputs {
  _call: OpenChallengeCall;

  constructor(call: OpenChallengeCall) {
    this._call = call;
  }

  get challengeId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get winnerTarget(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get leftScore(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get rightScore(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get time(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class OpenChallengeCall__Outputs {
  _call: OpenChallengeCall;

  constructor(call: OpenChallengeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetNftCostCall extends ethereum.Call {
  get inputs(): SetNftCostCall__Inputs {
    return new SetNftCostCall__Inputs(this);
  }

  get outputs(): SetNftCostCall__Outputs {
    return new SetNftCostCall__Outputs(this);
  }
}

export class SetNftCostCall__Inputs {
  _call: SetNftCostCall;

  constructor(call: SetNftCostCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftCostCall__Outputs {
  _call: SetNftCostCall;

  constructor(call: SetNftCostCall) {
    this._call = call;
  }
}

export class SetRateCall extends ethereum.Call {
  get inputs(): SetRateCall__Inputs {
    return new SetRateCall__Inputs(this);
  }

  get outputs(): SetRateCall__Outputs {
    return new SetRateCall__Outputs(this);
  }
}

export class SetRateCall__Inputs {
  _call: SetRateCall;

  constructor(call: SetRateCall) {
    this._call = call;
  }

  get _rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRateCall__Outputs {
  _call: SetRateCall;

  constructor(call: SetRateCall) {
    this._call = call;
  }
}

export class SetRewardTokenCall extends ethereum.Call {
  get inputs(): SetRewardTokenCall__Inputs {
    return new SetRewardTokenCall__Inputs(this);
  }

  get outputs(): SetRewardTokenCall__Outputs {
    return new SetRewardTokenCall__Outputs(this);
  }
}

export class SetRewardTokenCall__Inputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardTokenCall__Outputs {
  _call: SetRewardTokenCall;

  constructor(call: SetRewardTokenCall) {
    this._call = call;
  }
}

export class SetTeamNftCall extends ethereum.Call {
  get inputs(): SetTeamNftCall__Inputs {
    return new SetTeamNftCall__Inputs(this);
  }

  get outputs(): SetTeamNftCall__Outputs {
    return new SetTeamNftCall__Outputs(this);
  }
}

export class SetTeamNftCall__Inputs {
  _call: SetTeamNftCall;

  constructor(call: SetTeamNftCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTeamNftCall__Outputs {
  _call: SetTeamNftCall;

  constructor(call: SetTeamNftCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawRewardCall extends ethereum.Call {
  get inputs(): WithdrawRewardCall__Inputs {
    return new WithdrawRewardCall__Inputs(this);
  }

  get outputs(): WithdrawRewardCall__Outputs {
    return new WithdrawRewardCall__Outputs(this);
  }
}

export class WithdrawRewardCall__Inputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }

  get _challengeId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class WithdrawRewardCall__Outputs {
  _call: WithdrawRewardCall;

  constructor(call: WithdrawRewardCall) {
    this._call = call;
  }
}
